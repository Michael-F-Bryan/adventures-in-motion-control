initSidebarItems({"fn":[["apply","The static `Reflect.apply()` method calls a target function with arguments as specified."],["construct","The static `Reflect.construct()` method acts like the new operator, but as a function.  It is equivalent to calling `new target(...args)`. It gives also the added option to specify a different prototype."],["construct_with_new_target","The static `Reflect.construct()` method acts like the new operator, but as a function.  It is equivalent to calling `new target(...args)`. It gives also the added option to specify a different prototype."],["define_property","The static `Reflect.defineProperty()` method is like `Object.defineProperty()` but returns a `Boolean`."],["delete_property","The static `Reflect.deleteProperty()` method allows to delete properties.  It is like the `delete` operator as a function."],["get","The static `Reflect.get()` method works like getting a property from an object (`target[propertyKey]`) as a function."],["get_f64","The same as `Reflect::get` except the key is an `f64`, which is slightly faster."],["get_own_property_descriptor","The static `Reflect.getOwnPropertyDescriptor()` method is similar to `Object.getOwnPropertyDescriptor()`. It returns a property descriptor of the given property if it exists on the object, `undefined` otherwise."],["get_prototype_of","The static `Reflect.getPrototypeOf()` method is almost the same method as `Object.getPrototypeOf()`. It returns the prototype (i.e. the value of the internal `[[Prototype]]` property) of the specified object."],["get_u32","The same as `Reflect::get` except the key is a `u32`, which is slightly faster."],["has","The static `Reflect.has()` method works like the in operator as a function."],["is_extensible","The static `Reflect.isExtensible()` method determines if an object is extensible (whether it can have new properties added to it). It is similar to `Object.isExtensible()`, but with some differences."],["own_keys","The static `Reflect.ownKeys()` method returns an array of the target object's own property keys."],["prevent_extensions","The static `Reflect.preventExtensions()` method prevents new properties from ever being added to an object (i.e. prevents future extensions to the object). It is similar to `Object.preventExtensions()`, but with some differences."],["set","The static `Reflect.set()` method works like setting a property on an object."],["set_f64","The same as `Reflect::set` except the key is an `f64`, which is slightly faster."],["set_prototype_of","The static `Reflect.setPrototypeOf()` method is the same method as `Object.setPrototypeOf()`. It sets the prototype (i.e., the internal `[[Prototype]]` property) of a specified object to another object or to null."],["set_u32","The same as `Reflect::set` except the key is a `u32`, which is slightly faster."],["set_with_receiver","The static `Reflect.set()` method works like setting a property on an object."]]});